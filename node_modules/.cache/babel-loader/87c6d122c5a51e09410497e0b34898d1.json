{"ast":null,"code":"import axios from 'axios';\nvar host;\n// process.env是nodejs提供的一个api,它返回一个包含用户信息的对象\n// 通过NODE_ENV 判断当前环境是生产环境（production）还是开发环境（development）自动切换不同域名\n// 暂时开发环境和生产环境 所以域名暂时一样\nif (process.env.NODE_ENV == 'development') {\n  // 开发环境\n  host = 'http://shop.bufantec.com/bufan';\n} else {\n  host = 'http://shop.bufantec.com/bufan';\n}\n// 创建axios 实例\nconst instance = axios.create({\n  baseURL: host,\n  timeout: 5 * 1000\n});\n\n// 添加请求拦截器\nvar loading;\ninstance.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // vant加载中\n  loading = Toast.loading({\n    message: '加载中...',\n    forbidClick: true,\n    duration: 0\n  });\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  loading.clear();\n  return response;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  loading.clear();\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","host","process","env","NODE_ENV","instance","create","baseURL","timeout","loading","interceptors","request","use","config","Toast","message","forbidClick","duration","error","Promise","reject","response","clear"],"sources":["E:/vs.code/vue/乐购/legou/src/api/request.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nvar host\r\n// process.env是nodejs提供的一个api,它返回一个包含用户信息的对象\r\n// 通过NODE_ENV 判断当前环境是生产环境（production）还是开发环境（development）自动切换不同域名\r\n// 暂时开发环境和生产环境 所以域名暂时一样\r\nif (process.env.NODE_ENV == 'development') {\r\n  // 开发环境\r\n  host = 'http://shop.bufantec.com/bufan'\r\n} else {\r\n  host = 'http://shop.bufantec.com/bufan'\r\n}\r\n// 创建axios 实例\r\nconst instance = axios.create({\r\n  baseURL: host,\r\n  timeout: 5 * 1000\r\n})\r\n\r\n// 添加请求拦截器\r\nvar loading\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    // 在发送请求之前做些什么\r\n    // vant加载中\r\n    loading = Toast.loading({\r\n      message: '加载中...',\r\n      forbidClick: true,\r\n      duration: 0\r\n    })\r\n    return config\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(\r\n  function (response) {\r\n    // 2xx 范围内的状态码都会触发该函数。\r\n    // 对响应数据做点什么\r\n    loading.clear()\r\n    return response\r\n  },\r\n  function (error) {\r\n    // 超出 2xx 范围的状态码都会触发该函数。\r\n    // 对响应错误做点什么\r\n    loading.clear()\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default instance\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAIC,IAAI;AACR;AACA;AACA;AACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,aAAa,EAAE;EACzC;EACAH,IAAI,GAAG,gCAAgC;AACzC,CAAC,MAAM;EACLA,IAAI,GAAG,gCAAgC;AACzC;AACA;AACA,MAAMI,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC5BC,OAAO,EAAEN,IAAI;EACbO,OAAO,EAAE,CAAC,GAAG;AACf,CAAC,CAAC;;AAEF;AACA,IAAIC,OAAO;AACXJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/B,UAAUC,MAAM,EAAE;EAChB;EACA;EACAJ,OAAO,GAAGK,KAAK,CAACL,OAAO,CAAC;IACtBM,OAAO,EAAE,QAAQ;IACjBC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,OAAOJ,MAAM;AACf,CAAC,EACD,UAAUK,KAAK,EAAE;EACf;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACAb,QAAQ,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChC,UAAUS,QAAQ,EAAE;EAClB;EACA;EACAZ,OAAO,CAACa,KAAK,EAAE;EACf,OAAOD,QAAQ;AACjB,CAAC,EACD,UAAUH,KAAK,EAAE;EACf;EACA;EACAT,OAAO,CAACa,KAAK,EAAE;EACf,OAAOH,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AAED,eAAeb,QAAQ"},"metadata":{},"sourceType":"module"}